name: Deploy to Digital Ocean

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          web/package-lock.json
          dashboard/package-lock.json
    
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
    
    - name: Install Frontend dependencies
      run: |
        cd web && npm ci
        cd ../dashboard && npm ci
    
    - name: Run Python tests
      run: |
        cd backend
        python manage.py test --verbosity=2
    
    - name: Run Frontend tests
      run: |
        cd web && npm test --if-present
        cd ../dashboard && npm test --if-present
    
    - name: Build Frontend applications
      run: |
        cd web && npm run build
        cd ../dashboard && npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Deploy to Digital Ocean
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT || 22 }}
        script: |
          set -e
          
          echo "üöÄ Starting deployment to Digital Ocean..."
          
          # Navigate to application directory
          cd /opt/bottleplug
          
          # Create deployment log
          echo "$(date): Starting deployment" >> /opt/bottleplug/logs/deployment.log
          
          # Pull latest changes
          echo "üì• Pulling latest changes from git..."
          git fetch origin
          git reset --hard origin/main
          
          # Create backup of current deployment
          echo "üíæ Creating backup..."
          if [ -d "backup" ]; then
            rm -rf backup/old_*
            mv backup backup/old_$(date +%Y%m%d_%H%M%S) 2>/dev/null || true
          fi
          mkdir -p backup
          
          # Backup database
          echo "üóÑÔ∏è Backing up database..."
          docker-compose -f docker-compose.prod.yml exec -T db pg_dump -U bottleplug bottleplug_prod > backup/db_backup_$(date +%Y%m%d_%H%M%S).sql || echo "Database backup failed, continuing..."
          
          # Stop current containers gracefully
          echo "üõë Stopping current containers..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod down --timeout 30
          
          # Build and start new containers
          echo "üî® Building and starting containers..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod build --no-cache --parallel
          docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d
          
          # Wait for services to be healthy
          echo "‚è≥ Waiting for services to start..."
          sleep 45
          
          # Check if backend is healthy
          echo "üîç Checking backend health..."
          for i in {1..10}; do
            if docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T backend curl -f http://localhost:8000/health/ > /dev/null 2>&1; then
              echo "‚úÖ Backend is healthy"
              break
            fi
            echo "‚è≥ Waiting for backend to be ready... (attempt $i/10)"
            sleep 10
          done
          
          # Run database migrations
          echo "üóÑÔ∏è Running database migrations..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T backend python manage.py migrate --noinput
          
          # Collect static files
          echo "üìÅ Collecting static files..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod exec -T backend python manage.py collectstatic --noinput
          
          # Restart services to ensure everything is working
          echo "üîÑ Restarting services..."
          docker-compose -f docker-compose.prod.yml --env-file .env.prod restart
          
          # Clean up old images and containers
          echo "üßπ Cleaning up old images..."
          docker image prune -f
          docker container prune -f
          
          # Check if everything is running
          echo "‚úÖ Checking deployment status..."
          if docker-compose -f docker-compose.prod.yml --env-file .env.prod ps | grep -q "Up"; then
            echo "üéâ Deployment completed successfully!"
            echo "$(date): Deployment successful" >> /opt/bottleplug/logs/deployment.log
            
            # Test endpoints
            echo "üß™ Testing endpoints..."
            if curl -f http://localhost/health/ > /dev/null 2>&1; then
              echo "‚úÖ Health check passed"
            else
              echo "‚ö†Ô∏è Health check failed"
            fi
          else
            echo "‚ùå Some containers are not running. Check logs:"
            docker-compose -f docker-compose.prod.yml --env-file .env.prod logs --tail=50
            echo "$(date): Deployment failed" >> /opt/bottleplug/logs/deployment.log
            exit 1
          fi
          
          echo "üìä Deployment Summary:"
          echo "- Containers: $(docker-compose -f docker-compose.prod.yml --env-file .env.prod ps --services | wc -l) services"
          echo "- Status: $(docker-compose -f docker-compose.prod.yml --env-file .env.prod ps --format 'table {{.Name}}\t{{.Status}}')"
          echo "- Logs: docker-compose -f docker-compose.prod.yml --env-file .env.prod logs -f"

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    env:
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always() && env.SLACK_WEBHOOK != ''
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the GitHub Actions logs for details."