"""
Django settings for tanna_backend project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import os
import firebase_admin
from firebase_admin import credentials

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-change-this-in-production')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'corsheaders',
    'channels',
    'django_extensions',
    'drf_yasg',
    
    # Local apps
    'users',
    'products',
    'orders',
    'deliveries',
    'analytics',
    'event_management',
    'events',
    'expenses',
    'email_newsletter',
    'contact_form',
    'push_notifications',
    'mobile_api',
    'payments',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'tanna_backend.middleware.CORSHeadersMiddleware',
    'tanna_backend.middleware.ErrorHandlingMiddleware',
    'tanna_backend.middleware.RequestLoggingMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tanna_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tanna_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Try to get DATABASE_URL first, fallback to individual settings
import dj_database_url

DATABASE_URL = config('DATABASE_URL', default='')
if DATABASE_URL:
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DB_NAME', default='bottleplug'),
            'USER': config('DB_USER', default='postgres'),
            'PASSWORD': config('DB_PASSWORD', default='postgres123'),
            'HOST': config('DB_HOST', default='localhost'),
            'PORT': config('DB_PORT', default='5432'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Web API Token for frontend access
WEB_API_TOKEN = config('WEB_API_TOKEN', default='bottleplug-web-token-2024')

# REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'users.authentication.FirebaseAuthentication',
        'users.web_auth.WebTokenAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.FormParser',
    ],
}

# Branding for receipts and documents
SITE_NAME = config('SITE_NAME', default='BottlePlug')
SITE_ADDRESS = config('SITE_ADDRESS', default='Kampala, Uganda')
SITE_EMAIL = config('SITE_EMAIL', default='support@bottleplug.com')
SITE_PHONE = config('SITE_PHONE', default='+256 700 000 000')
# Logo should be a URL accessible to the backend (for PDF you can skip or embed placeholder)
SITE_LOGO_URL = config('SITE_LOGO_URL', default='http://dashboard/assets/picture-CzkPMWkL.png')
SITE_LOGO_PATH = os.path.join(MEDIA_ROOT, 'branding', 'logo.png')

# Enhanced CORS settings for all platforms
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",    # React/Next.js
    "http://localhost:3001",    # Admin Dashboard
    "http://localhost:5173",    # Vite
    "http://localhost:8080",    # Vue.js
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3001",
    "http://127.0.0.1:5173",
    "http://127.0.0.1:8080",
    "capacitor://localhost",    # Capacitor apps
    "ionic://localhost",        # Ionic apps
]

# Allow all origins in development for mobile apps
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

CORS_ALLOW_CREDENTIALS = True

# Additional headers for mobile apps
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'x-platform',
    'x-app-version',
    'x-device-id',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Firebase configuration
FIREBASE_CREDENTIALS_PATH = config('FIREBASE_CREDENTIALS_PATH', default='')
FIREBASE_SERVICE_ACCOUNT_KEY_PATH = os.path.join(BASE_DIR, 'firebase', 'booze-nation-94e3f-firebase-adminsdk-gegcg-c4b6679745.json')



# Custom user model
AUTH_USER_MODEL = 'users.User'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'logs/django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'tanna_backend': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Create logs directory if it doesn't exist
os.makedirs(os.path.join(BASE_DIR, 'logs'), exist_ok=True)

# Channels configuration
ASGI_APPLICATION = 'tanna_backend.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [config('REDIS_URL', default='redis://localhost:6379')],
        },
    },
}

# Celery configuration for background tasks
CELERY_BROKER_URL = config('REDIS_URL', default='redis://localhost:6379')
CELERY_RESULT_BACKEND = config('REDIS_URL', default='redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Flutterwave Payment Settings
# Environment Configuration
FLUTTERWAVE_ENVIRONMENT = os.environ.get('FLUTTERWAVE_ENVIRONMENT', 'sandbox')  # 'sandbox' or 'production'

# API Version Configuration
FLUTTERWAVE_API_VERSION = os.environ.get('FLUTTERWAVE_API_VERSION', '2024-01-01')  # '2024-01-01' or '2023-01-01'

# OAuth 2.0 Credentials (Recommended)
FLW_CLIENT_ID = os.environ.get('FLW_CLIENT_ID', '8e7eff59-be32-4697-8bb0-acc5e075d9e2')
FLW_CLIENT_SECRET = os.environ.get('FLW_CLIENT_SECRET', 'cBhBkZKitiKos6ofbvaLz3plwsNqrgz2')

# Legacy API Key Settings (Fallback)
FLUTTERWAVE_SECRET_KEY = os.environ.get('FLUTTERWAVE_SECRET_KEY', 'FLWSECK_TEST-b12c2ec53d3f7a675505a39ef14f3db6-X')
FLUTTERWAVE_PUBLIC_KEY = os.environ.get('FLUTTERWAVE_PUBLIC_KEY', 'FLWPUBK_TEST-bc21e991ab7b388f7528457efecbfabe-X')
FLUTTERWAVE_ENCRYPTION_KEY = os.environ.get('FLUTTERWAVE_ENCRYPTION_KEY', 'PbklZgsEgpznG61MgU+CBF3VMwINCKTh2MIU996U7zM=')
FLUTTERWAVE_SECRET_HASH = os.environ.get('FLUTTERWAVE_SECRET_HASH', '')

# Flutterwave v4 API URLs
FLUTTERWAVE_SANDBOX_URL = 'https://api.flutterwave.cloud/developersandbox'
FLUTTERWAVE_PRODUCTION_URL = 'https://api.flutterwave.cloud/f4bexperience'
FLUTTERWAVE_BASE_URL = os.environ.get('FLUTTERWAVE_BASE_URL', FLUTTERWAVE_SANDBOX_URL)

# Default Payment Settings
DEFAULT_PAYMENT_CURRENCY = os.environ.get('DEFAULT_PAYMENT_CURRENCY', 'UGX')
DEFAULT_PAYMENT_COUNTRY = os.environ.get('DEFAULT_PAYMENT_COUNTRY', 'UG')
DEFAULT_PAYMENT_OPTIONS = os.environ.get('DEFAULT_PAYMENT_OPTIONS', 'card,mobile_money,mpesa,bank transfer')
DEFAULT_REDIRECT_URL = os.environ.get('DEFAULT_REDIRECT_URL', 'boozenation://return')

# Site configuration for payments
# (Using earlier definitions for SITE_LOGO_URL and SITE_NAME set above.)

# Firebase Admin SDK initialization
try:
    # Initialize Firebase Admin SDK
    if FIREBASE_CREDENTIALS_PATH and os.path.exists(FIREBASE_CREDENTIALS_PATH):
        cred = credentials.Certificate(FIREBASE_CREDENTIALS_PATH)
        firebase_admin.initialize_app(cred)
        print("Firebase Admin SDK initialized successfully with custom credentials")
    elif os.path.exists(FIREBASE_SERVICE_ACCOUNT_KEY_PATH):
        cred = credentials.Certificate(FIREBASE_SERVICE_ACCOUNT_KEY_PATH)
        firebase_admin.initialize_app(cred)
        print("Firebase Admin SDK initialized successfully with default credentials")
    else:
        print(f"Firebase credentials file not found at: {FIREBASE_SERVICE_ACCOUNT_KEY_PATH}")
except Exception as e:
    print(f"Failed to initialize Firebase Admin SDK: {e}")
