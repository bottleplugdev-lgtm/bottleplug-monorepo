version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: bottleplug-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bottleplug_prod}
      POSTGRES_USER: ${POSTGRES_USER:-bottleplug}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - bottleplug-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bottleplug}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: bottleplug-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - bottleplug-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bottleplug-backend-prod
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bottleplug}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-bottleplug_prod}
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000}
      - FLW_CLIENT_ID=${FLW_CLIENT_ID}
      - FLW_CLIENT_SECRET=${FLW_CLIENT_SECRET}
      - FLUTTERWAVE_ENCRYPTION_KEY=${FLUTTERWAVE_ENCRYPTION_KEY}
      - FIREBASE_CREDENTIALS_PATH=/app/firebase-credentials.json
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./firebase-credentials.json:/app/firebase-credentials.json:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - bottleplug-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bottleplug-celery-prod
    restart: unless-stopped
    command: celery -A tanna_backend worker -l info
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bottleplug}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-bottleplug_prod}
      - REDIS_URL=redis://redis:6379/0
      - FLW_CLIENT_ID=${FLW_CLIENT_ID}
      - FLW_CLIENT_SECRET=${FLW_CLIENT_SECRET}
      - FLUTTERWAVE_ENCRYPTION_KEY=${FLUTTERWAVE_ENCRYPTION_KEY}
      - FIREBASE_CREDENTIALS_PATH=/app/firebase-credentials.json
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./firebase-credentials.json:/app/firebase-credentials.json:ro
    depends_on:
      - db
      - redis
    networks:
      - bottleplug-network

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bottleplug-celery-beat-prod
    restart: unless-stopped
    command: celery -A tanna_backend beat -l info
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-bottleplug}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-bottleplug_prod}
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./firebase-credentials.json:/app/firebase-credentials.json:ro
    depends_on:
      - db
      - redis
    networks:
      - bottleplug-network

  # Vue.js Frontend
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: bottleplug-frontend-prod
    restart: unless-stopped
    environment:
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000/api/v1}
    networks:
      - bottleplug-network

  # Admin Dashboard
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: bottleplug-dashboard-prod
    restart: unless-stopped
    environment:
      - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL:-http://localhost:8000/api/v1}
    networks:
      - bottleplug-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: bottleplug-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - bottleplug-network

  # PgAdmin (Optional - for database management)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: bottleplug-pgadmin-prod
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@bottleplug.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - bottleplug-network
    profiles:
      - tools

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
  pgadmin_data:

networks:
  bottleplug-network:
    driver: bridge
